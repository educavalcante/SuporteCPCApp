
[] Preparando seu Ambiente de Desenvolvimento
https://react-native.rocketseat.dev/
Nesse guia iremos mostrar o passo a passo para preparar o seu Ambiente React Native em sistemas Windows, Linux e macOS....
expo-cli
Não é mais recomendado instalar no seu sistema a Expo CLI global, você deve utilizar a Expo CLI local. Se você possui a instalação global, dê uma olhada aqui para aprender a desinstalar.
https://react-native.rocketseat.dev/errors/expo/#desinstalando-expo-cli-global-para-usar-expo-cli-local
Para executar os comandos com a Expo CLI local, basta adicionar o npx na frente, exemplos:
  npx expo --version
  npx expo -h

Não se utiliza a Expo CLI local para criação de projetos. Caso queira iniciar um novo projeto, utilize o comando npx create-expo-app --template
[] Emulador Android
Android Studio
Para criar o seu emulador android, é preciso ter o Android Studio instalado. Abra o programa e, dependendo se você já abriu ou não um projeto android no Android Studio antes, a interface será diferente.
Seguindo para configuração do ambiente Android no Windows utilizando Expo Bare Workflow ou React Native CLI, iremos realizar 3 instalações principais:
  1- Chocolatey;
  2 - JDK 11 (LTS);
  3 - Android Studio e dependências.
  
[] 1- Chocolatey;
  Execute o comando abaixo para verificar se você possui permissões para instalar dependências com o terminal:
    Get-ExecutionPolicy
  Caso o retorno desse comando seja diferente de “RemoteSigned” ou "Unrestricted", execute o seguinte comando em seu terminal:
    Set-ExecutionPolicy RemoteSigned
  Agora, execute o seguinte comando para instalar o Chocolatey:
    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

  Agora, teste se a instalação ocorreu corretamente executando o seguinte comando no seu terminal (nada irá acontecer, mas não deve retornar erros):
    choco

[] 2 - JDK 11 (LTS) - Caso esteja com o JDK instalado em sua máquina, certifique-se que sua versão seja exatamente a versão 11.
  choco install -y openjdk11
Agora reinicie o Powershell e execute o seguinte comando no seu terminal:
  java -version
  Se apresentar a versão do Java, sua instalação foi um sucesso.


[] 3 Android Studio
Preparativos:
Crie uma pasta em um local desejado para instalação da SDK (Ex.: C:\Android\Sdk). É muito importante que esse caminho não possua espaços ou caracteres especiais pois irá causar erros.
Anote esse caminho para ser utilizado posteriormente
  Agora, no Painel de Controle do Windows, abra o item “Sistema e Segurança” ou “Sistema”, clique em “Configurações avançadas do sistema”, 
  selecione “Variáveis de ambiente” e clique no botão “Nova variável de ambiente”, indique o nome da variável como ANDROID_HOME, 
  adicione o caminho utilizado acima (Ex.: C:\Android\Sdk) como segundo parâmetro e clique em OK.  

  Faça o mesmo processo para criar a variável JAVA_HOME. Mas primeiramente temos que obter o caminho de instalação.

  Para obter o caminho, execute o comando abaixo no Powershell:
    Get-Command java

Ele deve retornar o caminho da sua instalação. Informe esse valor excluindo o final bin/java.exe no momento da criação da JAVA_HOME. 
Por exemplo, se o comando retornar o caminho C:\Program Files\Eclipse Adoptium\jdk-11.0.17.8-hotspot\bin\java.exe, crie a variável JAVA_HOME com o valor 
C:\Program Files\Eclipse Adoptium\jdk-11.0.17.8-hotspot.

[] Na mesma janela de "Variáveis de ambiente" no Windows, clique na variável PATH e então em "Editar". 
Haverá uma lista de caminhos e você deve adicionar esses quatro novos caminhos no fim da lista:
  %ANDROID_HOME%\emulator
  %ANDROID_HOME%\tools
  %ANDROID_HOME%\tools\bin
  %ANDROID_HOME%\platform-tools
Se sua versão do Windows for menor que a 10 sempre coloque ponto-e-virgula ";" no final dos caminhos para eles não se juntarem

Acesse a página do Android Studio e clique no botão Download Android Studio.:
  Vá até a pasta onde o arquivo foi salvo e execute o instalador.
  A primeira janela que deve aparecer é para escolher o que vai ser instalado. Por padrão, a opção Android Studio já vem selecionada. 
  ✔ Selecione também a opção Android Virtual Device e clique em Next. @done(23-05-14 21:29)

  https://react-native.rocketseat.dev/android/windows#preparativos-android-studio
  aumentar espaço em disco para 8000

  usar o emulador:
  https://react-native.rocketseat.dev/virtual-devices/android-emulator
  Iniciando o Emulador
  Com o emulador pronto, basta clicar no botão Play e aguardar o AVD iniciar. Esse processo pode demorar, principalmente na primeira execução.
  
  Quando o emulador terminar de carregar, abra o seu terminal e execute o comando:
  adb devices

  Se estiver tudo certo, deve aparecer uma lista com o nome do seu emulador android aberto (normalmente emulator-5554) e status device

 [] Executando app no Emulador
  Expo Bare Workflow:
  Para esse passo é preciso que você já tenha criado o seu projeto Expo Bare Workflow. Caso não tenha criado ainda, você pode criar com o comando: 
    npx create-expo-app --template e escolher o template Blank (Bare).

    Agora, com o emulador aberto, basta abrir um terminal, acessar a pasta do seu projeto e executar o comando:
      npm run android



  [] indev 
      npm run android  (emulador android)
      npx expo start (rodar no device externo expo-go)
=========================================================================================================================================

[] como executar o expo -- recomendado npx expo start
ao inicar um projeto usar npm ou npx expo init myapp
npx executa sem ter a necessidade de ter o expo instalado
npx expo init my app (esclha o tipo com ts)
npx creat-expo-app (nao pergt o tipo de projeto)
npx expo start -- n pegar o expo local
expo init myapp (usa o excpo da maquina) com o npx expo init myapp nao precisa ter o expo (vantajoso)

npx expo install expo-font (para instalar algum tipode fonte)
---- usar local na maquina precisa fazer a instalacao 
pegar do site metodo mais atual exemplo npm i -g expo-cli (docs.expo.dev)

[] instalar o expo local 
npm i -g expo-cli
[] emulador
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

[]  instar o ambiente
https://react-native.rocketseat.dev/expo-managed/windows :
    https://react-native.rocketseat.dev/:
☐ 2 na pasta do projeto executar o expo start 
expo init nome-app --npm
** -- npm pra usar por padrao o npm
criar com blank typescripy
[] Instalar o native-base   -- https://docs.nativebase.io/install-expo
1 **em um projeto ja Existente
  npm install native-base
  expo install react-native-svg@12.1.1
  expo install react-native-safe-area-context@3.3.2
========================================================================================================================
[] BABEL (ESTATEGIA DE MAPEAMENTO DE PASTAS MAPPING PATH) confifurar o babel e o tsconfig
npm install --save-dev-plugin-module-resolver

1 COPIAR EM babel.config:
plugins: [
  [
    'module-resolver',
    {
      root: ['./src'],
      alias: {
        '@dtos': './src/dtos',
        '@assets': './src/assets',
        '@components': './src/components',
        '@screens': './src/screens',
        '@storage': './src/storage',
        '@utils': './src/utils',
        '@services': './src/services',
        '@hooks': './src/hooks',
        '@contexts': './src/contexts',
        '@routes': './src/routes'
      }
    },
  ],
],
2 COPIAR EM tsconfig.json:
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "@dtos/*": [
        "src/dtos/*"
      ],
      "@assets/*": [
        "./src/assets/*"
      ],
      "@components/*": [
        "./src/components/*"
      ],
      "@screens/*": [
        "./src/screens/*"
      ],
      "@storage/*": [
        "./src/storage/*"
      ],
      "@utils/*": [
        "./src/utils/*"
      ],
      "@services/*": [
        "./src/services/*"
      ],
      "@hooks/*": [
        "./src/hooks/*"
      ],
      "@contexts/*": [
        "./src/contexts/*"
      ],
      "@routes/*": [
        "./src/routes/*"
      ]
    }
  }
}
========================================================================================================================================
[] Icons
https://oblador.github.io/react-native-vector-icons/
import { MaterialIcons } from '@expo/vector-icons';
<HStack>
                <Icon 
                    as={MaterialIcons}
                    name="check"
                    color="gray.200"
                    size={7}
                />
</HStack>


[] cores
#e23c44 vermelhor de exlcuir
#31CF67 VERDE DE gravar

aliceblue (`#f0f8ff`)
antiquewhite (`#faebd7`)
aqua (`#00ffff`)
aquamarine (`#7fffd4`)
azure (`#f0ffff`)
beige (`#f5f5dc`)
bisque (`#ffe4c4`)
black (`#000000`)
blanchedalmond (`#ffebcd`)
blue (`#0000ff`)
blueviolet (`#8a2be2`)
brown (`#a52a2a`)
burlywood (`#deb887`)
cadetblue (`#5f9ea0`)
chartreuse (`#7fff00`)
chocolate (`#d2691e`)
coral (`#ff7f50`)
cornflowerblue (`#6495ed`)
cornsilk (`#fff8dc`)
crimson (`#dc143c`)
cyan (`#00ffff`)
darkblue (`#00008b`)
darkcyan (`#008b8b`)
darkgoldenrod (`#b8860b`)
darkgray (`#a9a9a9`)
darkgreen (`#006400`)
darkgrey (`#a9a9a9`)
darkkhaki (`#bdb76b`)
darkmagenta (`#8b008b`)
darkolivegreen (`#556b2f`)
darkorange (`#ff8c00`)
darkorchid (`#9932cc`)
darkred (`#8b0000`)
darksalmon (`#e9967a`)
darkseagreen (`#8fbc8f`)
darkslateblue (`#483d8b`)
darkslategrey (`#2f4f4f`)
darkturquoise (`#00ced1`)
darkviolet (`#9400d3`)
deeppink (`#ff1493`)
deepskyblue (`#00bfff`)
dimgray (`#696969`)
dimgrey (`#696969`)
dodgerblue (`#1e90ff`)
firebrick (`#b22222`)
floralwhite (`#fffaf0`)
forestgreen (`#228b22`)
fuchsia (`#ff00ff`)
gainsboro (`#dcdcdc`)
ghostwhite (`#f8f8ff`)
gold (`#ffd700`)
goldenrod (`#daa520`)
gray (`#808080`)
green (`#008000`)
greenyellow (`#adff2f`)
grey (`#808080`)
honeydew (`#f0fff0`)
hotpink (`#ff69b4`)
indianred (`#cd5c5c`)
indigo (`#4b0082`)
ivory (`#fffff0`)
khaki (`#f0e68c`)
lavender (`#e6e6fa`)
lavenderblush (`#fff0f5`)
lawngreen (`#7cfc00`)
lemonchiffon (`#fffacd`)
lightblue (`#add8e6`)
lightcoral (`#f08080`)
lightcyan (`#e0ffff`)
lightgoldenrodyellow (`#fafad2`)
lightgray (`#d3d3d3`)
lightgreen (`#90ee90`)
lightgrey (`#d3d3d3`)
lightpink (`#ffb6c1`)
lightsalmon (`#ffa07a`)
lightseagreen (`#20b2aa`)
lightskyblue (`#87cefa`)
lightslategrey (`#778899`)
lightsteelblue (`#b0c4de`)
lightyellow (`#ffffe0`)
lime (`#00ff00`)
limegreen (`#32cd32`)
linen (`#faf0e6`)
magenta (`#ff00ff`)
maroon (`#800000`)
mediumaquamarine (`#66cdaa`)
mediumblue (`#0000cd`)
mediumorchid (`#ba55d3`)
mediumpurple (`#9370db`)
mediumseagreen (`#3cb371`)
mediumslateblue (`#7b68ee`)
mediumspringgreen (`#00fa9a`)
mediumturquoise (`#48d1cc`)
mediumvioletred (`#c71585`)
midnightblue (`#191970`)
mintcream (`#f5fffa`)
mistyrose (`#ffe4e1`)
moccasin (`#ffe4b5`)
navajowhite (`#ffdead`)
navy (`#000080`)
oldlace (`#fdf5e6`)
olive (`#808000`)
olivedrab (`#6b8e23`)
orange (`#ffa500`)
orangered (`#ff4500`)
orchid (`#da70d6`)
palegoldenrod (`#eee8aa`)
palegreen (`#98fb98`)
paleturquoise (`#afeeee`)
palevioletred (`#db7093`)
papayawhip (`#ffefd5`)
peachpuff (`#ffdab9`)
peru (`#cd853f`)
pink (`#ffc0cb`)
plum (`#dda0dd`)
powderblue (`#b0e0e6`)
purple (`#800080`)
rebeccapurple (`#663399`)
red (`#ff0000`)
rosybrown (`#bc8f8f`)
royalblue (`#4169e1`)
saddlebrown (`#8b4513`)
salmon (`#fa8072`)
sandybrown (`#f4a460`)
seagreen (`#2e8b57`)
seashell (`#fff5ee`)
sienna (`#a0522d`)
silver (`#c0c0c0`)
skyblue (`#87ceeb`)
slateblue (`#6a5acd`)
slategray (`#708090`)
snow (`#fffafa`)
springgreen (`#00ff7f`)
steelblue (`#4682b4`)
tan (`#d2b48c`)
teal (`#008080`)
thistle (`#d8bfd8`)
tomato (`#ff6347`)
turquoise (`#40e0d0`)
violet (`#ee82ee`)
wheat (`#f5deb3`)
white (`#ffffff`)
whitesmoke (`#f5f5f5`)
yellow (`#ffff00`)
yellowgreen (`#9acd32`)
Thanks for letting us know!

[] como executar o expo -- recomendado npx expo start
ao inicar um projeto usar npm ou npx expo init myapp
npx executa sem ter a necessidade de ter o expo instalado
npx expo init my app (esclha o tipo com ts)
npx creat-expo-app (nao pergt o tipo de projeto)
npx expo start -- n pegar o expo local
expo init myapp (usa o excpo da maquina) com o npx expo init myapp nao precisa ter o expo (vantajoso)

npx expo install expo-font (para instalar algum tipode fonte)


---- usar local na maquina precisa fazer a instalacao 
pegar do site metodo mais atual exemplo npm i -g expo-cli (docs.expo.dev)

[] instalar o expo local 
npm i -g expo-cli
[] emulador
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

[]  instar o ambiente
https://react-native.rocketseat.dev/expo-managed/windows :
    https://react-native.rocketseat.dev/:
☐ 2 na pasta do projeto executar o expo start 
expo init nome-app --npm
** -- npm pra usar por padrao o npm
criar com blank typescripy
========================================================================================================================
[] BABEL (ESTATEGIA DE MAPEAMENTO DE PASTAS MAPPING PATH) confifurar o babel e o tsconfig
npm install --save-dev-plugin-module-resolver
[] Mapeamento das pastas
1 COPIAR EM babel.config:
plugins: [
  [
    'module-resolver',
    {
      root: ['./src'],
      alias: {
        '@dtos': './src/dtos',
        '@assets': './src/assets',
        '@components': './src/components',
        '@screens': './src/screens',
        '@storage': './src/storage',
        '@utils': './src/utils',
        '@services': './src/services',
        '@hooks': './src/hooks',
        '@contexts': './src/contexts',
        '@routes': './src/routes'
      }
    },
  ],
],
2 COPIAR EM tsconfig.json:
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "@dtos/*": [
        "src/dtos/*"
      ],
      "@assets/*": [
        "./src/assets/*"
      ],
      "@components/*": [
        "./src/components/*"
      ],
      "@screens/*": [
        "./src/screens/*"
      ],
      "@storage/*": [
        "./src/storage/*"
      ],
      "@utils/*": [
        "./src/utils/*"
      ],
      "@services/*": [
        "./src/services/*"
      ],
      "@hooks/*": [
        "./src/hooks/*"
      ],
      "@contexts/*": [
        "./src/contexts/*"
      ],
      "@routes/*": [
        "./src/routes/*"
      ]
    }
  }
}
========================================================================================================================
[] incluir fontes
npx expo install expo-font @expo-google-fonts/roboto

-- importar no app.tsx import { useFonts, roboto...dizer qual } from '@expo-google-fonts/roboto';
import { useFonts, Roboto_700Bold, Roboto_400Regular } from '@expo-google-fonts/roboto';
testar se a fonte ta carregada no inicio --- 
export default function App() {
  const [fontsLoaded] = useFonts({ Roboto_700Bold, Roboto_400Regular }); -- carregar a fonte que vai usar
  return (
    <View>
      {fontsLoaded ? <Text>Hello</Text> : <View />}  -- testa se a fonte esta carregada
    </View>
  );
}
========================================================================================================================

    [] publicacao na loja 
lojas, requisitos e dicas

templates
ANDROID:
    - criar conta de desenvolvedor - glogle play console
    screenshots no Android
    gerando icones do App
    criando o splash Screen
    Carregamento do Splash
    Gerando o Android App Bundle
    Configurando Google Play Store
    Distribuindo app para testers

   

========================================================================================================================
    [] publicacao na loja 
    lojas, requisitos e dicas
    
    templates
    ANDROID:
        - criar conta de desenvolvedor - glogle play console
        screenshots no Android
        gerando icones do App
        criando o splash Screen
        Carregamento do Splash
        Gerando o Android App Bundle
        Configurando Google Play Store
        Distribuindo app para testers
    
    
========================================================================================================================
[] incluir fontes
npx expo install expo-font @expo-google-fonts/roboto

-  importar no app.tsx import { useFonts, roboto...dizer qual } from '@expo-google-fonts/roboto';
import { useFonts, Roboto_700Bold, Roboto_400Regular } from '@expo-google-fonts/roboto';
testar se a fonte ta carregada no inicio --- 
export default function App() {
  const [fontsLoaded] = useFonts({ Roboto_700Bold, Roboto_400Regular }); -- carregar a fonte que vai usar
  return (
    <View>
      {fontsLoaded ? <Text>Hello</Text> : <View />}  -- testa se a fonte esta carregada
    </View>
  );
}
========================================================================================================================
[] NativeBaseProvider (encapsular todo o layout)

========================================================================================================================
[] StatusBar
import { StatusBar } from 'react-native';
<StatusBar
barStyle="light-content"
backgroundColor="transparent"
translucent  (mostrar no topo)
/>
========================================================================================================================
[] native-base componente library - docs.nativebase.io
- bibilioteca de compontnes - produtividade
docs.nativebase.ioimport { Spinner } from 'native-base'
Loadiing:
import { Spinner, Center } from 'native-base'   -- center e spinner
export function Loading() {
    return (
        <Center flex={1}>  -- flex 1 tomar toda tela
            <Spinner />
        </Center>
    );
}
- instalar em projeto existente ou em projeto novo
- 1 npm install native-base
- 2 expo install react-native-svg@12.1.1
- 3 expo install react-native-safe-area-context@3.3.2

testar se o native-base esta funcionado importa o NativeBaseProvider (anvoçver tpda a aplicacao)
========================================================================================================================
[] THEME customizar tema do native-base -- import { extendTheme }
src/theme/index.ts
- extender o thema padrao criando uma nova tematica com as cores do projeto
precisa importar o thema craido no App.tsx 
...............................................index.ts
import { extendTheme } from 'native-base'
export const THEME = extendTheme(
    {
        colors: {
            green: {
                700: '#00875F',
                500: '#00B37E',
            },
            gray: {
                700: '#121214',
                600: '#202024',
                500: '#29292E',
                400: '#323238',
                300: '#7C7C8A',
                200: '#C4C4CC',
                100: '#E1E1E6'
            },
            white: '#FFFFFF',
            red: {
                500: '#F75A68'
            }
        },
        fonts: {
            heading: 'Roboto_700Bold',
            body: 'Roboto_400Regular',
        },
        fontSizes: {
            xs: 12,
            sm: 14,
            md: 16,
            lg: 18,
            xl: 20,
        },
        sizes: {
            14: 56,
            33: 148
        }
    }
)
========================================================================================================================
[] <Image /> importar imagens  - comonente {Image} from 'native-base'
import BackgroundImg from 'caminho...' (necessário criar a tipagem do png)
adicionar a typagem com o @assets/@types/png.d.ts
 - declare module "*.png";
 - depois importar a imagem do local e usar o <Image> do native-base
 - adcionar a tag alt="" //tirar o warning
            source={BackgroundImg}
            alt="pessoas treinando"
            resizeMode="contain"
            position="absolute"
 [] *SVG* instalada a dependencia para poder exibir o svg
  1 expo install react-native-svg@12.1.1
  2 a biblioteca svg TRANSFORMER   instalar ******* npm i react-native-svg-transformer --save-dev
  3 criar e configurar o metro.config.js
  metro.config.js  criar um arquivco com esse nome e configurações  
  import LogoSvg from '@assets/logo.svg';
========================================================================================================================
[] VStack/>  componente de layout que coloca uma coisa emcima da outra - compmente de layout*
========================================================================================================================
[] Heading /> compnente de texto para destaques de titulos
[] Input /> 
inputs devem ser tipados para poder acessar as propriedades
Input({ ...rest }: IInputProps) // tipagem {: 
    return (
        <NativeBaseInput
            bg="gray.700"
            h={14}
            px={4}
            borderWidth={0}
            fontSize="md"
            color="white"
            fontFamily="body"
            mb={4}
            placeholderTextColor="gray.300"
            estilizar o focus:   
              _focus={{bg: "gray.700", borderwidth: 1, borderColor: "grenn.500"}}  // efeito tipo hover:
            {...rest} // sempre por ultimo o rest:
-- criar o arquivo Input.tsx em componentes, criar o compontente e importar na App.tsx por exemplo
-- estilziar o visual com o teclado especifico e campo senha *****:
<Input
  placeholder="E-mail"
  keyboardType="email-address"
  autoCapitalize='none' //manter texto em minusculo:
/>
<Input
  placeholder="Senha"
  secureTextEntry  //nao mosrar o texto da senha: 
/>
========================================================================================================================
[] Button -- Exemplo de um componente
import { Button as ButtonNativeBase, IButtonProps, Text } from 'native-base';  // importar e renomear com alias, I a tipagem

type Props = IButtonProps & {  // typescript tipagem:
    title: string;
}

export function Button({ title, ...rest }: Props) {  //tipagem:
    return (
        <ButtonNativeBase   
          propriedades configuradas:
            w="full"  // largura full mt massa                                topzera:
            h={14}
            bg="green.700"
            rounded="sm"   // para ficar totalmente arrendodado usar o "full":
            _pressed={  // estilizar quando tiver pressionado:                 topzera:
                {
                    bg: "green.500"
                }
            }

            {...rest}
        >
            <Text color="white" fontSize="heading" fontFamily="sm">
                {title}
            </Text>
        </ButtonNativeBase>
    );
}
importar no SignIn por exemplo puxado do caminho '@compontents/Button'
  <Button title="Acessar" />:
  <Button title="Criar Conta" />: 
    *** possibilidade de usar vairante para o componente para evitar de criar mais de um componente
criar um type na props exemplo
    variant?: 'solid' | 'outline':
ma passagem de parametro restringir quais são as variantes
      exemplo:bg={variant === "outline" ? "transparent" : "green.500"}
              borderWidth={variant === "outline" ? 1 : 0} 
              color={variant === "outline" ? "gray.500" : "green.500"}
========================================================================================================================
[] <ScrollView />  BARRA DE ROLAGEM
ENVELOPANDO toda a tag acima da Vstack exmplo no SignIn:
// usar a propíendade  contentContainerStyle={{ flexGrow: 1 }}> 
========================================================================================================================
[] <Navigation /> stack navigator  -- https://reactnavigation.org/
3 passos para instalaçao core, dependencias e native stack (2 estrategias de navegacao) 1 rotas logado e 2 nao-logado
intalar usando o npm -- npm install @react-navigation/native
                        npx expo install react-native-screens react-native-safe-area-context
                        npm install @react-navigation/native-stack
criar as ROTAS >.
pasta routs/auth.Routes.tsx
usar o createNativeStackNavigator da native-stack
criar as rotas das Screen/
-- @tipagem das rotas
1 - Rotas de autenticacao: @Navigator <(as interfaces não precisa estar logado)>
  **sao as rotas que não precisa estar logado, ou logar ou criar conta**
  importar o usenavigatio from o react-navigation
  pegar a tipagem caso a navegacao seja para telas especificas
  criar a funcao handle que vai fazer a acao de mudar a tela
  colcoar no onPress do botao
  caso seja uma volta simples nao preicsa usar a tipagem apenas a navigation.GoBack()
>> exemplo na tela do signIn:
const navigation = useNavigation<AuthNavigatorRoutesProps>(); /// exemplo com a tipagem
  function handleNewAccount() {
      navigation.navigate('signUp')
  }
========================================================================================================================
2 Bottom Navigator:  @Navigator <(continuacao com as rotas que precisa estar autenticado)>
criar as outras interface para compor as rotas
  @instalar-BOTTOM-dev-NAVIGATOR-TAB-navigation< https://reactnavigation.org/docs/tab-based-navigation >
  npm install @react-navigation/bottom-tabs
-- BOTTOM-NAVIGTOR
componente do roda pe que contem o icones de navegacao, pode ser estilizado tirando o nome do icone pelo 
<Navigator @screenOptions={{
  headerShown: false,:
  tabBarShowLabel: false,:
}}
aula - Alterando os ícones da Bottom Navigator:
estilização da Bottom Tab Navigator ao implementar os ícones na aplicação. Iremos utilizar os svgs já presentes na pasta assets e aplicá-los na tabBar por meio da prop tabBarIcon.
https://app.rocketseat.com.br/node/projeto-03-1/group/rotas-privadas/lesson/alterando-os-icones-da-bottom-navigator
Esitizar os @icones do bottom  - IMPORTAR AS IMAGENS
1 - Importar icones do assets se tiver
2 - colocar no options do screenOpton -- Options --- tabBarIcon
3 - padronizar tamanho usando o defaultTheme (se o tamnho for o mesmo pra todos colocar o size numa constante para repetir)
exemplo 
    options={  FAZERR TELA POR TELA -- Desta forma dentro da Screen tem que fazer em todas as telas  usando a screenOption o <Screen/
      tabBarIcon: () => (
        <IconeSvg />
      )
    }
aula -  COR DOS ICONES SELECIONADOS   Estilizando menu ativo e inativos:  
https://app.rocketseat.com.br/node/projeto-03-1/group/rotas-privadas/lesson/estilizando-menu-ativo-e-inativos
Nessa aula prática você irá alterar as cores das abas ativas e inativas da tabBar por meio das props tabBarActiveTintColor etabBarInactiveTintColor.:
cor padrao o azul para a scren selecionada e cinza as outras  -- customizar as cores da aplicacao tokens de cores do thema
--@tabBarActiveTintColor do Navigator (screenOptions)
-pegar a cor por desistruturacao do thema como o size
-usar no navigator para pegar geral
tabBarActiveTintColor: colors.green[500],
tabBarInactiveTintColor: colors.gray[200]

aula -  Estilizando a Bottom Navigator:
https://app.rocketseat.com.br/node/projeto-03-1/group/rotas-privadas/lesson/estilizando-a-bottom-navigator 
Para finalizar a estilização da tabBar, iremos aplicar um estilo dependente da plataforma (Android ou iOS) e remover a aba Exercise da tabBar.:
@gerenciar o sistema operacional @android ou @Ios:
☐ import { Platform } from 'react-native'
☐ tabBarStyle: {
  backgroundColor: colors.gray[600],
  borderTopWidth: 0,
  height: Platform.OS === "android" ? 'auto' : 96,
  paddingBottom: sizes[10],
  paddingTop: sizes[6],

✔ ocultar menu sem uso no momento no bottomNavigaror: @done(23-04-20 22:56)
  ✔ options={{ tabBarButton: () => null }} @done(23-04-20 22:56)
  
  ☐ ================Recap do App Routes========================
  Nessa aula de revisão iremos repassar por todas as etapas de construção do AppRoutes, desde a definição das rotas até a estilização da tabBar.:
  https://app.rocketseat.com.br/node/projeto-03-1/group/rotas-privadas/lesson/recap-do-app-routes
 
  ✔ RECAP DA NAVEGAÇÃO @done(23-05-27 22:36)
rotas de navegacao (aut e app) autenticacao e autenticadas
tipagem especifica das screens de acordo com a rota
utilizada a stackNavigation e a bottomNavigation
2 rotas separadas para aplicar a autenticacao na app
configurar themas
estillizar menu, tela ativa, svg, gerencia de plataforma condicionalmente IOS e Android
ocultar rota 

========================================================================================================================
[] Remover o header 
da Tela da navegacao <Screen/>:
no <Screen 
    options= {{
      headerShown: false:  
        //@dessa  FAZERR TELA POR TELA -- Desta forma dentro da Screen tem que fazer em todas as telas 
    }}
@fazer pelo Navigator usando a @screenOptions = {{ headerShown: false}}:           

========================================================================================================================
[] Splash
========================================================================================================================
[] ativar o linear gradient
backgroundColor: 'linear-gradient(180deg, #008898 0%, #81E6D9 151.95%, #38B2AC 151.95%);',
npm install react-native-linear-gradient

[] Tela de login
Home:
export e export defautl
- exportacao sem o defalut exportacao nomeada usar entre cheves com o default n precisa das chaves
o export sem o default tem que apontar entre chaves  *** preferir usar sem o defautl para evityar inconsistencias
na default vc n escolhe o que quer exportar por isso n precisa das chaves (pode apelidar / da margem a inconsistencias)
*** preferir usar sem o defautl para evityar inconsistencias
na App obrigatorio usar a export default
[] botao
<Button:
title="ACESSAR"
color="#000000"
onPress={() => Alert.alert('not press this one')}
/>
[] onPress={handle}  
handle: 
    as funções que são disparadas a partir de um toque do usuário usar o handle

[] preenchimento de tela
direção do elementos *um abaixo do outro
flex: 1 preenche todo o display
--
usar o with:'100%',
flexDirection: 'row'
alignItems: 'center'
>>> Flex de 1 empurra todo o conteudo
para desgrudar quem ta embaixo usar o margin botom de 10 

[] Componentizacao (para criar interfaces)
lego - peças que podem ser *reaproveitadas* e peças especificas
componentizar quando se repetem (botoes, caixas de texto, cabeçalhos) 
vantaens: 
    reutilizar, produticidade, isolamento de contexto, reduz complexidade, arquivos menores, padroniza e melhor leitura
criar componentes:


fINALIZANDO AS TELAS:
  ======================================================== COMPONENTES, INTERFACES (TELAS) ===============================================
POSICIONAMENTO HORIZONTAL E VERTICAL [] HStack / [] VStack
Nessa aula prática vamos desenvolver o componente HomeHeader, junto com a criação desse componente vamos aprender como podemos posicionar elementos em linha (horizontal) utilizando o HStack e elementos em colunas (vertical) utilizando o VStack.
https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/posicionando-na-vertical-e-horizontal

[] HStack usado no componente HomeHeader para colocar um ao lado do outro exemplo:
- - foto do avatar, olá, e nome do usario assim como botão sair no cabeçalho da pagina (homeHeader)
[] Photo  componetne de foto tipando
import { Image, IImageProps } from "native-base";
type Props = IImageProps & {
    size: number;
}
              export function UserPhoto({size, ...rest}: Props){
                  return(
                      <Image 
                      w={size}
                      h={size}
                      rounded="full"
                      borderWidth={2}
                      borderColor="gray.400"

                      {...rest}
                      />
                  )
              }
[] MaterialIcons importanto do @Expo/Vector-icons so que usando o Icon do native-base para passar as propriedades
import { MaterialIcons } from '@expo/vector-icons';
<TouchableOpacity>
  <Icon 
      as={MaterialIcons}
      name="logout"
      color="gray.200"
      size={7}
  />
</TouchableOpacity>

[] envolver com <TouchableOpacity> do 'react-native' para tonar clicavel

=================================================================================================================================
Criando componente Group (filtragem):
  - Nessa aula prática vamos iniciar a criação do componente responsável por fazer a filtragem do grupo de exercícios.
https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/criando-componente-group

- 1 - criar o componente Group e tipar ele com a name: string e estilizar o texto
adciona ele na Home 

- 2 - Utilizando o <Pressable/>
- Nessa aula prática vamos aprender a utilizar o componente Pressable do NativeBase. Vamos entender as diferenças entre ele e o TouchableOpacity.
quando quer que criar uma area de toque , compórtamento parecido com o <touchableOpacity/> (A DIFERENÇA EH QUE NAO DA O OPACITY)
Usar a tipagem IPressableProps &
estilizar mr, w, h, bg, rounded, justfyContent, AlignItens, Overflow e ...rest
o justifyContent e o alignItens = center deixam bem alinhados no centro
overflow = "hidden" (para não ultrapassar o limite)

- 3 - Estilizando evento de Pressed (mudar visual do botão qd pressionado)  _pressed
- Nessa aula prática vamos aprender como podemos customizar o Pressable no momento em que o componente esteja ou não sendo pressionado utilizando a propriedade _pressed.
 

- 4 - Exibindo o grupo selecionado
- Nessa aula prática vamos criar uma estilização semelhante ao _pressed para podermos indicar o grupo que está selecionado no momento,
 para isso vamos adicionar uma propriedade isActive para o componente Group e utilizar o estado da aplicação para indicar o estado 
 selecionado.
 https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/exibindo-o-grupo-selecionado
- tipar isActive  boleana
- personalizar o botao com a propriedade isPressed={isActive} o bt ative vai recever a estilizada atribuida ao _pressed
- estilizar tb o texto com o     {isActive ? "green.500" : "gray.200"}
- criar um estado para selecionado
  criar o arrey para o UseSate do react e mudar no onPress do grupo
  onPress={() => setGrouSelected(nomedogruposelecionado)}
- usar a propriedade

[] FlatList
- 5-Listando os grupos  <FlatList/>
- Nessa aula prática vamos criar a listagem horizontal de grupos utilizando a FlatList do NativeBase, para melhorar a experiência
 vamos criar um estado auxiliar para termos mais grupos para serem listados. ( lista fica dinamica e ja com a rolagem )
 https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/listando-os-grupos
- criar o useState com o array dos grupos
- colcoar pra rodar os itens no flatlist
- estilizar a propriedade horizontal, caolocar o espaçamento necessario
            <FlatList
                data={groups}
                keyExtractor={item => item}
                renderItem={({item})=>(
                    <Group 
                    name={item}
                    isActive={groupSelected === item} 
                    onPress={()=> setGrouSelected(item)}
                    />
                )}
                horizontal
                showsHorizontalScrollIndicator={false}
                _contentContainerStyle={{ px: 6 }}   
                my={10}
                maxH={10}
            />
=================================================================================================================================

- Proximas aulas (componente exercicios)
https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/header-da-lista-de-exercicios
colocar o <Hstack> com o justyContent = "space-between" para o alinhamento horizontal com espaços separados mb={5} margin botom
a <Vstak> com flex={1} e p paddle xy de espaço {8} px={8}
 - 1 - componente que lista os exercicios
 https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/criando-componente-exercise-card
 ExerciseCard que será o componente responsável por exibir os detalhes do exercício no momento da listagem.
 - Vamos aprender como podemos a limitar a quantidade de linhas que serão exibidas utilizando o numberOfLines.

 https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/criando-componente-exercise-card


=================================================================================================================================
[] Historico (exibir uma listagem com a <SectionList/>)
https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/utilizando-section-list
- Nessa aula vamos conhecer um novo componente que vai nos ajudar a agrupar uma listagem de dados na nossa aplicação.
- cria um componente com um card com os dados, depois na pagina onde vai renderizar usa uma section para organizar o array
- o arary obedece ao formato title e data
29.05.2023
  CLIENTE   - title do array
  titulo do chamado -- data do array

  CLIENTE
  titulo do chamado
- exemplo do array
  const [tarefas, setTarefas] = useState([
    {
        title: "25.5.23",
        data: ["Manobra Base dados", "Tela Uti"]
    },
    {
        title: "26.5.23",
        data: ["Implantasr Rastreabilidade"]
    },
])
  
- exemplo da <SectionList /> na screen/myTasks
      <SectionList 
                sections={tarefas}
                keyExtractor={item => item}
                renderItem={({item}) => (
                    <HistoricoCard />
                )}
                renderSectionHeader={({section}) => (
                    <Heading color="gray.200" fontSize="sm" mt={10} mb={3}>
                        {section.title}
                    </Heading>
                )}
                    px={6}
            />

      [] Mensagem de lista vazia
  https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/mensagem-de-lista-vazia
 -  Nessa aula prática vamos aprender como podemos adicionar um componente personalizado para exibir quando uma listagem está vazia utilizando a propriedade ListEmptyComponent.
 - Vamos aprender como podemos dar uma quebra de linha nos nossos textos utilizando o {'\n'}.

 
 ✔ overview / recap @done(23-05-27 21:33)
 componente screnHeader maleavel
 card para ter as informações puxdas do backend com as devidas tipagens
 nova forma de listar renderizando com a sectionList pega o conteudo do backend 
--------------------------------------------------------------------------------------
[] perfil 
- componente UserPhoto
 - --passar o source={{uri: 'http..'}} | alt="xxx" size={33}
 centralziar o <Center /> fazer o margin top mt={} e o pading xy py={}

=======================================================================================
[] componente de feeedback para o usaurio   <Skeleton />
https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/efeito-skeleton
- <Skeleton />
- conceito é cirar  mesma forma geometrica com as mesmas dimensões para ficar "por traz do carregamento" 
- podendo manipúlar o a cor inicial e final para fazer o efeito
- criar um state boleano para o bloco, exemplo o carregamento da foto do perfil

                    <Center mt={6} px={10}>
                    {
                        photoIsLoading ?
                        <Skeleton    --------------- componente de feedback
                            w={PHOTO_SIZE}
                            h={PHOTO_SIZE}
                            rounded="full"
                            startColor="gray.500"
                            endColor="gray.400"
                        />
                        :
                        <UserPhoto 
                            source={{ uri : 'https://lh3.googleusercontent.com/ogw/AOLn63FyVSI51xvzPIeFoMHMpkazEQQEZ5lBf1j1CJnN7w=s32-c-mo' }}
                            alt="foto do perfil"
                            size={PHOTO_SIZE}               
                        />
                    }                        
                    </Center>
=======================================================================================
-  Botão -                       <TouchableOpacity />
[] colocar um BOTÃO na tela de perfil para altear a foto e abrir a galeria de fotos do celular
 - componente <TouchableOpacity /> do "react-native"
 - colocar um texto dentro estilizado com a cor, fontweight = bold, mt={2} mb={8}

 <TouchableOpacity>
 <Text color="green.500" fontWeight="bold" fontSize="sm" mt={2} mb={8}>
     Alterar Foto
 </Text>
</TouchableOpacity>   

=======================================================================================
 -  Input  -                      <NativeBaseInput />
 https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/inputs-de-nome-e-e-mails
[] o input é um @componemnts/inpt já estilizado no projeto
import { Input as NativeBaseInput, IInputProps } from 'native-base'

export function Input({ ...rest }: IInputProps) {
    return (
        <NativeBaseInput
            bg="gray.100"
            h={14}
            px={4}
            borderWidth={3}
            borderRadius={10}
            fontSize="xs"
            color="white"
            fontFamily="body"
            mb={2}
            placeholderTextColor="gray.300"
            _focus={{
                bg: "gray.700",
                borderWidth: 1,
                borderColor: "grenn.500"
            }}

            {...rest}
        />
    );
}

  <Input 
                              placeholder='eduardo@cpcbrasil.com'
                              bg="gray.500"
                              borderWidth={0}
                              isDisabled
                          />  

 - RECAP DA PROFILE
 - <screenHeader />cabeçaho aproveitado do componente <screenHeader />
 - <Skeleton /> adcionado um skeleton para dar um feedback de carregamento com useState() se foto esta carregando mostra o esqueleto senao carrega a foto
 - <TouchableOpacity />  botão pra alterar a senha
 - <Scrolview /> barra de rolagem para os inputs com uma propriedade contentContainerStyle = {{ paddingBotton: 56}}
 - <input /> @compontent (propriedades de input utilziadas)  
     desabilitado para digitacao   - isDisabled
     mostrando o ** da senha       - secureTextEntry
 - <Vstack /> um abaixo do outro
 acessar a pagina da documentação do native-base, [docs.nativebase.io/customize-theme], 
 para pegar os tamanhos padrões de design [cores, tamanhos, tipography, shadows etc]

==========================================================================================================================================================================
[] tela que exibe os detalhes de uma tarefa  <função de Navegação> usando a tipagem das rotas/telas
https://app.rocketseat.com.br/node/projeto-03-1/group/finalizando-as-interfaces/lesson/navegando-para-tela-de-exercicio
- função handle (usada para quando é disparada pela interação de um usuario) exemplo vai clicar e acessar os detalhes
- a função vai no onPress={} do card que vai ser clicado no caso chamado ou tarefa para navegar ate o detalhe
- importar o useNavigarion do react-natigation/native
- //!**** usar a tipagem criada para as opções de rotas para que elas fiquem disponivel para .navigation <appNavigatorProps>()
  - essa tipagem esta dentro de routes/app.routes.tsx

const navigation = useNavigation<appNavigatorProps>();

function handleOpenDetalheChamados(){ 
  navigation.navigate('chamadodetalhe')
}

<taskChamado 
  onPress={handleOpenDetalheChamado}
/>
- tipagem <AppTabNavigatorRoutesProps> exportada (dentro de routes/app.routes.tsx)

type AppRoutes = {
    home: undefined;
    jobs: undefined;
    mytasks: undefined;
    ratday: undefined;
    profile: undefined;
}
export type AppTabNavigatorRoutesProps = BottomTabNavigationProp<AppRoutes>; //exportar a tipagem AppRoutes
==========================================================================================================================================================================

[] tela de chamados detalhe com um cabeçalho, seta pra voltar e dos detalhes do chamado
- botao pra voltar usando o navigatios.GoBack()
- arrumação com a <HSatck e VStack> alighItem="center" justifyContent="space-between"
- no <Heading ou Text> pode usar um flexShrink={1} para fazer aquebra do texto


