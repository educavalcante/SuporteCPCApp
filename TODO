[] como executar o expo -- recomendado npx expo start
ao inicar um projeto usar npm ou npx expo init myapp
npx executa sem ter a necessidade de ter o expo instalado
npx expo init my app (esclha o tipo com ts)
npx creat-expo-app (nao pergt o tipo de projeto)
npx expo start -- n pegar o expo local
expo init myapp (usa o excpo da maquina) com o npx expo init myapp nao precisa ter o expo (vantajoso)

npx expo install expo-font (para instalar algum tipode fonte)


---- usar local na maquina precisa fazer a instalacao 
pegar do site metodo mais atual exemplo npm i -g expo-cli (docs.expo.dev)

[] instalar o expo local 
npm i -g expo-cli
[] emulador
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

[]  instar o ambiente
https://react-native.rocketseat.dev/expo-managed/windows :
    https://react-native.rocketseat.dev/:
☐ 2 na pasta do projeto executar o expo start 
expo init nome-app --npm
** -- npm pra usar por padrao o npm
criar com blank typescripy
[] Instalar o native-base   -- https://docs.nativebase.io/install-expo
1 **em um projeto ja Existente
  npm install native-base
  expo install react-native-svg@12.1.1
  expo install react-native-safe-area-context@3.3.2
========================================================================================================================
[] BABEL (ESTATEGIA DE MAPEAMENTO DE PASTAS MAPPING PATH) confifurar o babel e o tsconfig
npm install --save-dev-plugin-module-resolver

1 COPIAR EM babel.config:
plugins: [
  [
    'module-resolver',
    {
      root: ['./src'],
      alias: {
        '@dtos': './src/dtos',
        '@assets': './src/assets',
        '@components': './src/components',
        '@screens': './src/screens',
        '@storage': './src/storage',
        '@utils': './src/utils',
        '@services': './src/services',
        '@hooks': './src/hooks',
        '@contexts': './src/contexts',
        '@routes': './src/routes'
      }
    },
  ],
],
2 COPIAR EM tsconfig.json:
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "@dtos/*": [
        "src/dtos/*"
      ],
      "@assets/*": [
        "./src/assets/*"
      ],
      "@components/*": [
        "./src/components/*"
      ],
      "@screens/*": [
        "./src/screens/*"
      ],
      "@storage/*": [
        "./src/storage/*"
      ],
      "@utils/*": [
        "./src/utils/*"
      ],
      "@services/*": [
        "./src/services/*"
      ],
      "@hooks/*": [
        "./src/hooks/*"
      ],
      "@contexts/*": [
        "./src/contexts/*"
      ],
      "@routes/*": [
        "./src/routes/*"
      ]
    }
  }
}
========================================================================================================================
[] incluir fontes
npx expo install expo-font @expo-google-fonts/roboto

-- importar no app.tsx import { useFonts, roboto...dizer qual } from '@expo-google-fonts/roboto';
import { useFonts, Roboto_700Bold, Roboto_400Regular } from '@expo-google-fonts/roboto';
testar se a fonte ta carregada no inicio --- 
export default function App() {
  const [fontsLoaded] = useFonts({ Roboto_700Bold, Roboto_400Regular }); -- carregar a fonte que vai usar
  return (
    <View>
      {fontsLoaded ? <Text>Hello</Text> : <View />}  -- testa se a fonte esta carregada
    </View>
  );
}
========================================================================================================================
[] NativeBaseProvider (encapsular todo o layout)

========================================================================================================================
[] StatusBar
import { StatusBar } from 'react-native';
<StatusBar
barStyle="light-content"
backgroundColor="transparent"
translucent  (mostrar no topo)
/>
========================================================================================================================
[] native-base componente library - docs.nativebase.io
bibilioteca de compontnes - produtividade
docs.nativebase.ioimport { Spinner } from 'native-base'
Loadiing:
import { Spinner, Center } from 'native-base'   -- center e spinner
export function Loading() {
    return (
        <Center flex={1}>  -- flex 1 tomar toda tela
            <Spinner />
        </Center>
    );
}
instar em projeto existente ou em projeto novo
1 npm install native-base
2 expo install react-native-svg@12.1.1
3 expo install react-native-safe-area-context@3.3.2

testar se o native-base esta funcionado importa o NativeBaseProvider (anvoçver tpda a aplicacao)
========================================================================================================================
[] THEME customizar tema do native-base -- import { extendTheme }
src/theme/index.ts
extender o thema padrao criando uma nova tematica com as cores do projeto
precisa importar o thema craido no App.tsx 
...............................................index.ts
import { extendTheme } from 'native-base'
export const THEME = extendTheme(
    {
        colors: {
            green: {
                700: '#00875F',
                500: '#00B37E',
            },
            gray: {
                700: '#121214',
                600: '#202024',
                500: '#29292E',
                400: '#323238',
                300: '#7C7C8A',
                200: '#C4C4CC',
                100: '#E1E1E6'
            },
            white: '#FFFFFF',
            red: {
                500: '#F75A68'
            }
        },
        fonts: {
            heading: 'Roboto_700Bold',
            body: 'Roboto_400Regular',
        },
        fontSizes: {
            xs: 12,
            sm: 14,
            md: 16,
            lg: 18,
            xl: 20,
        },
        sizes: {
            14: 56,
            33: 148
        }
    }
)
========================================================================================================================
[] importar imagens  - comonente {Image} from 'native-base'
import BackgroundImg from 'caminho...' (necessário criar a tipagem do png)
adicionar a typagem com o @assets/@types/png.d.ts
 - declare module "*.png";
 - depois importar a imagem do local e usar o <Image> do native-base
 - adcionar a tag alt="" //tirar o warning
            source={BackgroundImg}
            alt="pessoas treinando"
            resizeMode="contain"
            position="absolute"
 [] *SVG* instalada a dependencia para poder exibir o svg
  1 expo install react-native-svg@12.1.1
  2 a biblioteca svg TRANSFORMER   intarlar ******* npm i react-native-svg-transformer --save-dev
  3 criar e configurar o metro.config.js
  metro.config.js  criar um arquivco com esse nome e configurações  
  import LogoSvg from '@assets/logo.svg';
========================================================================================================================
[] VStack componente de layout que coloca uma coisa emcima da outra - compmente de layout*
========================================================================================================================
[] Heading compnente de texto para destaques de titulos
[] Input /> 
inputs devem ser tipados para poder acessar as propriedades
Input({ ...rest }: IInputProps) // tipagem {: 
    return (
        <NativeBaseInput
            bg="gray.700"
            h={14}
            px={4}
            borderWidth={0}
            fontSize="md"
            color="white"
            fontFamily="body"
            mb={4}
            placeholderTextColor="gray.300"
            estilizar o focus:   
              _focus={{bg: "gray.700", borderwidth: 1, borderColor: "grenn.500"}}  // efeito tipo hover:
            {...rest} // sempre por ultimo o rest:
-- criar o arquivo Input.tsx em componentes, criar o compontente e importar na App.tsx por exemplo
-- estilziar o visual com o teclado especifico e campo senha *****:
<Input
  placeholder="E-mail"
  keyboardType="email-address"
  autoCapitalize='none' //manter texto em minusculo:
/>
<Input
  placeholder="Senha"
  secureTextEntry  //nao mosrar o texto da senha: 
/>
========================================================================================================================
[] Button -- Exemplo de um componente
import { Button as ButtonNativeBase, IButtonProps, Text } from 'native-base';  // importar e renomear com alias, I a tipagem

type Props = IButtonProps & {  // typescript tipagem:
    title: string;
}

export function Button({ title, ...rest }: Props) {  //tipagem:
    return (
        <ButtonNativeBase   
          propriedades configuradas:
            w="full"  // largura full mt massa                                topzera:
            h={14}
            bg="green.700"
            rounded="sm"   // para ficar totalmente arrendodado usar o "full":
            _pressed={  // estilizar quando tiver pressionado:                 topzera:
                {
                    bg: "green.500"
                }
            }

            {...rest}
        >
            <Text color="white" fontSize="heading" fontFamily="sm">
                {title}
            </Text>
        </ButtonNativeBase>
    );
}
importar no SignIn por exemplo puxado do caminho '@compontents/Button'
  <Button title="Acessar" />:
  <Button title="Criar Conta" />: 
    *** possibilidade de usar vairante para o componente para evitar de criar mais de um componente
criar um type na props exemplo
    variant?: 'solid' | 'outline':
ma passagem de parametro restringir quais são as variantes
      exemplo:bg={variant === "outline" ? "transparent" : "green.500"}
              borderWidth={variant === "outline" ? 1 : 0} 
              color={variant === "outline" ? "gray.500" : "green.500"}
========================================================================================================================
[] <ScrollView  BARRA DE ROLAGEM
ENVELOPANDO toda a tag acima da Vstack exmplo no SignIn:
// usar a propíendade  contentContainerStyle={{ flexGrow: 1 }}> 
========================================================================================================================
[] <Navigation> stack navigator  -- https://reactnavigation.org/
3 passos para instalaçao core, dependencias e native stack (2 estrategias de navegacao) 1 rotas logado e 2 nao-logado
intalar usando o npm -- npm install @react-navigation/native
                        npx expo install react-native-screens react-native-safe-area-context
                        npm install @react-navigation/native-stack
criar as ROTAS >.
pasta routs/auth.Routes.tsx
usar o createNativeStackNavigator da native-stack
criar as rotas das Screen/
-- @tipagem das rotas
1 - -rotas de autenticacao:
  **sao as rotas que não precisa estar logado, ou logar ou criar conta**
  importar o usenavigatio from o react-navigation
  pegar a tipagem caso a navegacao seja para telas especificas
  criar a funcao handle que vai fazer a acao de mudar a tela
  colcoar no onPress do botao
  caso seja uma volta simples nao preicsa usar a tipagem apenas a navigation.GoBack()

>> exmeplo na tela do signIn:
const navigation = useNavigation<AuthNavigatorRoutesProps>(); /// exemplo com a tipagem

function handleNewAccount() {
    navigation.navigate('signUp')
}

========================================================================================================================
[]
========================================================================================================================
[] Splash
========================================================================================================================
[] ativar o linear gradient
backgroundColor: 'linear-gradient(180deg, #008898 0%, #81E6D9 151.95%, #38B2AC 151.95%);',
npm install react-native-linear-gradient

[] Tela de login
Home:
export e export defautl
exportacao sem o defalut exportacao nomeada usar entre cheves com o default n precisa das chaves
o export sem o default tem que apontar entre chaves  *** preferir usar sem o defautl para evityar inconsistencias
na default vc n escolhe o que quer exportar por isso n precisa das chaves (pode apelidar / da margem a inconsistencias)
*** preferir usar sem o defautl para evityar inconsistencias
na App obrigatorio usar a export default
[] botao
<Button:
title="ACESSAR"
color="#000000"
onPress={() => Alert.alert('not press this one')}
/>
[] onPress={handle}  
handle: 
    as funções que são disparadas a partir de um toque do usuário usar o handle

[] preenchimento de tela
direção do elementos *um abaixo do outro
flex: 1 preenche todo o display
--
usar o with:'100%',
flexDirection: 'row'
alignItems: 'center'
>>> Flex de 1 empurra todo o conteudo
para desgrudar quem ta embaixo usar o margin botom de 10 

[] Componentizacao (para criar interfaces)
lego - peças que podem ser *reaproveitadas* e peças especificas
componentizar quando se repetem (botoes, caixas de texto, cabeçalhos) 
vantaens: 
    reutilizar, produticidade, isolamento de contexto, reduz complexidade, arquivos menores, padroniza e melhor leitura
criar componentes:


[] cores
#e23c44 vermelhor de exlcuir
#31CF67 VERDE DE gravar

aliceblue (`#f0f8ff`)
antiquewhite (`#faebd7`)
aqua (`#00ffff`)
aquamarine (`#7fffd4`)
azure (`#f0ffff`)
beige (`#f5f5dc`)
bisque (`#ffe4c4`)
black (`#000000`)
blanchedalmond (`#ffebcd`)
blue (`#0000ff`)
blueviolet (`#8a2be2`)
brown (`#a52a2a`)
burlywood (`#deb887`)
cadetblue (`#5f9ea0`)
chartreuse (`#7fff00`)
chocolate (`#d2691e`)
coral (`#ff7f50`)
cornflowerblue (`#6495ed`)
cornsilk (`#fff8dc`)
crimson (`#dc143c`)
cyan (`#00ffff`)
darkblue (`#00008b`)
darkcyan (`#008b8b`)
darkgoldenrod (`#b8860b`)
darkgray (`#a9a9a9`)
darkgreen (`#006400`)
darkgrey (`#a9a9a9`)
darkkhaki (`#bdb76b`)
darkmagenta (`#8b008b`)
darkolivegreen (`#556b2f`)
darkorange (`#ff8c00`)
darkorchid (`#9932cc`)
darkred (`#8b0000`)
darksalmon (`#e9967a`)
darkseagreen (`#8fbc8f`)
darkslateblue (`#483d8b`)
darkslategrey (`#2f4f4f`)
darkturquoise (`#00ced1`)
darkviolet (`#9400d3`)
deeppink (`#ff1493`)
deepskyblue (`#00bfff`)
dimgray (`#696969`)
dimgrey (`#696969`)
dodgerblue (`#1e90ff`)
firebrick (`#b22222`)
floralwhite (`#fffaf0`)
forestgreen (`#228b22`)
fuchsia (`#ff00ff`)
gainsboro (`#dcdcdc`)
ghostwhite (`#f8f8ff`)
gold (`#ffd700`)
goldenrod (`#daa520`)
gray (`#808080`)
green (`#008000`)
greenyellow (`#adff2f`)
grey (`#808080`)
honeydew (`#f0fff0`)
hotpink (`#ff69b4`)
indianred (`#cd5c5c`)
indigo (`#4b0082`)
ivory (`#fffff0`)
khaki (`#f0e68c`)
lavender (`#e6e6fa`)
lavenderblush (`#fff0f5`)
lawngreen (`#7cfc00`)
lemonchiffon (`#fffacd`)
lightblue (`#add8e6`)
lightcoral (`#f08080`)
lightcyan (`#e0ffff`)
lightgoldenrodyellow (`#fafad2`)
lightgray (`#d3d3d3`)
lightgreen (`#90ee90`)
lightgrey (`#d3d3d3`)
lightpink (`#ffb6c1`)
lightsalmon (`#ffa07a`)
lightseagreen (`#20b2aa`)
lightskyblue (`#87cefa`)
lightslategrey (`#778899`)
lightsteelblue (`#b0c4de`)
lightyellow (`#ffffe0`)
lime (`#00ff00`)
limegreen (`#32cd32`)
linen (`#faf0e6`)
magenta (`#ff00ff`)
maroon (`#800000`)
mediumaquamarine (`#66cdaa`)
mediumblue (`#0000cd`)
mediumorchid (`#ba55d3`)
mediumpurple (`#9370db`)
mediumseagreen (`#3cb371`)
mediumslateblue (`#7b68ee`)
mediumspringgreen (`#00fa9a`)
mediumturquoise (`#48d1cc`)
mediumvioletred (`#c71585`)
midnightblue (`#191970`)
mintcream (`#f5fffa`)
mistyrose (`#ffe4e1`)
moccasin (`#ffe4b5`)
navajowhite (`#ffdead`)
navy (`#000080`)
oldlace (`#fdf5e6`)
olive (`#808000`)
olivedrab (`#6b8e23`)
orange (`#ffa500`)
orangered (`#ff4500`)
orchid (`#da70d6`)
palegoldenrod (`#eee8aa`)
palegreen (`#98fb98`)
paleturquoise (`#afeeee`)
palevioletred (`#db7093`)
papayawhip (`#ffefd5`)
peachpuff (`#ffdab9`)
peru (`#cd853f`)
pink (`#ffc0cb`)
plum (`#dda0dd`)
powderblue (`#b0e0e6`)
purple (`#800080`)
rebeccapurple (`#663399`)
red (`#ff0000`)
rosybrown (`#bc8f8f`)
royalblue (`#4169e1`)
saddlebrown (`#8b4513`)
salmon (`#fa8072`)
sandybrown (`#f4a460`)
seagreen (`#2e8b57`)
seashell (`#fff5ee`)
sienna (`#a0522d`)
silver (`#c0c0c0`)
skyblue (`#87ceeb`)
slateblue (`#6a5acd`)
slategray (`#708090`)
snow (`#fffafa`)
springgreen (`#00ff7f`)
steelblue (`#4682b4`)
tan (`#d2b48c`)
teal (`#008080`)
thistle (`#d8bfd8`)
tomato (`#ff6347`)
turquoise (`#40e0d0`)
violet (`#ee82ee`)
wheat (`#f5deb3`)
white (`#ffffff`)
whitesmoke (`#f5f5f5`)
yellow (`#ffff00`)
yellowgreen (`#9acd32`)
Thanks for letting us know!

[] como executar o expo -- recomendado npx expo start
ao inicar um projeto usar npm ou npx expo init myapp
npx executa sem ter a necessidade de ter o expo instalado
npx expo init my app (esclha o tipo com ts)
npx creat-expo-app (nao pergt o tipo de projeto)
npx expo start -- n pegar o expo local
expo init myapp (usa o excpo da maquina) com o npx expo init myapp nao precisa ter o expo (vantajoso)

npx expo install expo-font (para instalar algum tipode fonte)


---- usar local na maquina precisa fazer a instalacao 
pegar do site metodo mais atual exemplo npm i -g expo-cli (docs.expo.dev)

[] instalar o expo local 
npm i -g expo-cli
[] emulador
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

[]  instar o ambiente
https://react-native.rocketseat.dev/expo-managed/windows :
    https://react-native.rocketseat.dev/:
☐ 2 na pasta do projeto executar o expo start 
expo init nome-app --npm
** -- npm pra usar por padrao o npm
criar com blank typescripy
========================================================================================================================
[] BABEL (ESTATEGIA DE MAPEAMENTO DE PASTAS MAPPING PATH) confifurar o babel e o tsconfig
npm install --save-dev-plugin-module-resolver

1 COPIAR EM babel.config:
plugins: [
  [
    'module-resolver',
    {
      root: ['./src'],
      alias: {
        '@dtos': './src/dtos',
        '@assets': './src/assets',
        '@components': './src/components',
        '@screens': './src/screens',
        '@storage': './src/storage',
        '@utils': './src/utils',
        '@services': './src/services',
        '@hooks': './src/hooks',
        '@contexts': './src/contexts',
        '@routes': './src/routes'
      }
    },
  ],
],
2 COPIAR EM tsconfig.json:
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "baseUrl": "./",
    "paths": {
      "@dtos/*": [
        "src/dtos/*"
      ],
      "@assets/*": [
        "./src/assets/*"
      ],
      "@components/*": [
        "./src/components/*"
      ],
      "@screens/*": [
        "./src/screens/*"
      ],
      "@storage/*": [
        "./src/storage/*"
      ],
      "@utils/*": [
        "./src/utils/*"
      ],
      "@services/*": [
        "./src/services/*"
      ],
      "@hooks/*": [
        "./src/hooks/*"
      ],
      "@contexts/*": [
        "./src/contexts/*"
      ],
      "@routes/*": [
        "./src/routes/*"
      ]
    }
  }
}
========================================================================================================================
[] incluir fontes
npx expo install expo-font @expo-google-fonts/roboto

-- importar no app.tsx import { useFonts, roboto...dizer qual } from '@expo-google-fonts/roboto';
import { useFonts, Roboto_700Bold, Roboto_400Regular } from '@expo-google-fonts/roboto';
testar se a fonte ta carregada no inicio --- 
export default function App() {
  const [fontsLoaded] = useFonts({ Roboto_700Bold, Roboto_400Regular }); -- carregar a fonte que vai usar
  return (
    <View>
      {fontsLoaded ? <Text>Hello</Text> : <View />}  -- testa se a fonte esta carregada
    </View>
  );
}
========================================================================================================================

    [] publicacao na loja 
lojas, requisitos e dicas

templates
ANDROID:
    - criar conta de desenvolvedor - glogle play console
    screenshots no Android
    gerando icones do App
    criando o splash Screen
    Carregamento do Splash
    Gerando o Android App Bundle
    Configurando Google Play Store
    Distribuindo app para testers

   

========================================================================================================================
    [] publicacao na loja 
    lojas, requisitos e dicas
    
    templates
    ANDROID:
        - criar conta de desenvolvedor - glogle play console
        screenshots no Android
        gerando icones do App
        criando o splash Screen
        Carregamento do Splash
        Gerando o Android App Bundle
        Configurando Google Play Store
        Distribuindo app para testers
    
    